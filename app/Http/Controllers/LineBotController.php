<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;

class LineBotController extends Controller
{
    public function webhook(Request $request)
    {
        $data = $request->all();
        Log::info("Raw Webhook: " . json_encode($data, JSON_UNESCAPED_UNICODE));

        $events = $data['events'] ?? [];

        foreach ($events as $event) {
            if (!isset($event['replyToken'])) {
                continue;
            }

            $replyToken = $event['replyToken'];

            // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            if ($event['type'] === 'message' && $event['message']['type'] === 'text') {
                $userText = trim($event['message']['text']);

                if ($userText === '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏â‡∏±‡∏ô') {
                    $this->replyMessage($replyToken, [
                        "type" => "text",
                        "text" => "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏∏‡∏ì üêò‚òï",
                        "quickReply" => [
                            "items" => [[
                                "type" => "action",
                                "action" => [
                                    "type" => "location",
                                    "label" => "üìç ‡πÅ‡∏ä‡∏£‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"
                                ]
                            ]]
                        ]
                    ]);
                }
            }

            // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô location
            if ($event['type'] === 'message' && $event['message']['type'] === 'location') {
                $lat = $event['message']['latitude'];
                $lng = $event['message']['longitude'];

                Log::info("User Location: lat={$lat}, lng={$lng}");

                // ‚úÖ Query ‡∏´‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà
                $cafes = DB::select("
                    SELECT cafes.cafe_id, cafes.cafe_name, cafes.address, cafes.lat, cafes.lng, cafes.phone,
                           (6371 * acos(
                               cos(radians(?)) * cos(radians(cafes.lat)) *
                               cos(radians(cafes.lng) - radians(?)) +
                               sin(radians(?)) * sin(radians(cafes.lat))
                           )) AS distance
                    FROM cafes
                    HAVING distance < 5
                    ORDER BY distance ASC
                    LIMIT 5
                ", [$lat, $lng, $lat]);

                Log::info("Nearby Cafes: " . json_encode($cafes, JSON_UNESCAPED_UNICODE));

                if (empty($cafes)) {
                    $this->replyMessage($replyToken, [
                        "type" => "text",
                        "text" => "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ 5 ‡∏Å‡∏°. ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì üò¢"
                    ]);
                    return;
                }

                // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô text ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
                $msg = "‡πÄ‡∏à‡∏≠‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà " . count($cafes) . " ‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏∏‡∏ì üìç\n\n";
                foreach ($cafes as $cafe) {
                    $msg .= "‚òï " . $cafe->cafe_name . "\n";
                    $msg .= "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: " . ($cafe->address ?? "-") . "\n";
                    $msg .= "‚òé " . ($cafe->phone ?? "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•") . "\n";
                    $msg .= "‡∏´‡πà‡∏≤‡∏á: " . round($cafe->distance, 2) . " ‡∏Å‡∏°.\n";
                    $msg .= "---------------------\n";
                }

                $this->replyMessage($replyToken, [
                    "type" => "text",
                    "text" => $msg
                ]);
            }
        }

        return response()->json(['status' => 'ok']);
    }

    private function replyMessage($replyToken, $message)
    {
        $accessToken = config('services.line.channel_access_token');

        Http::withHeaders([
            'Content-Type' => 'application/json',
            'Authorization' => 'Bearer ' . $accessToken,
        ])->post('https://api.line.me/v2/bot/message/reply', [
            'replyToken' => $replyToken,
            'messages' => [$message],
        ]);
    }
}
